name: Publish to NPM

on:
  # Manual trigger with version selection
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history for version bumping
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build all packages
        run: pnpm -r run build

      - name: Run tests
        run: pnpm -r run test

      - name: Configure git for version bumping
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current published version
        run: |
          # Get current version from npm registry (source of truth)
          CURRENT_NPM_VERSION=$(npm view @mcp-installer/cli version 2>/dev/null || echo "0.0.0")
          echo "CURRENT_NPM_VERSION=$CURRENT_NPM_VERSION" >> $GITHUB_ENV
          echo "📦 Current published version: $CURRENT_NPM_VERSION"

      - name: Calculate next version
        run: |
          # Install semver for version calculation
          npm install -g semver
          
          BUMP_TYPE=${{ github.event.inputs.version }}
          CURRENT_VERSION=${{ env.CURRENT_NPM_VERSION }}
          
          # Calculate next version using semver
          NEXT_VERSION=$(semver -i $BUMP_TYPE $CURRENT_VERSION)
          echo "NEW_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "🚀 Next version will be: $NEXT_VERSION"

      - name: Pre-flight checks
        run: |
          echo "🔍 Running pre-flight checks..."
          
          # Check if version already exists on npm
          if npm view @mcp-installer/cli@${{ env.NEW_VERSION }} version 2>/dev/null; then
            echo "❌ Version ${{ env.NEW_VERSION }} already published to npm"
            exit 1
          fi
          
          if npm view @mcp-installer/shared@${{ env.NEW_VERSION }} version 2>/dev/null; then
            echo "❌ Version ${{ env.NEW_VERSION }} already published to npm"
            exit 1
          fi
          
          echo "✅ Version ${{ env.NEW_VERSION }} is available for publishing"

      - name: Bump package versions (no commit yet)
        run: |
          echo "📝 Bumping package versions to ${{ env.NEW_VERSION }}..."
          
          # Bump versions but don't commit yet (wait for successful publish)
          cd packages/shared
          npm version ${{ env.NEW_VERSION }} --no-git-tag-version
          
          cd ../cli
          npm version ${{ env.NEW_VERSION }} --no-git-tag-version
          
          echo "✅ Versions updated in package.json files"

      - name: Verify workspace dependency conversion
        run: |
          echo "🔍 Checking workspace dependency before publishing..."
          cd packages/cli
          echo "Current CLI dependency:"
          node -p "require('./package.json').dependencies['@mcp-installer/shared']"

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN MODE - No packages will be published"
          echo "📊 Version Information:"
          echo "  Current npm version: ${{ env.CURRENT_NPM_VERSION }}"
          echo "  Bump type: ${{ github.event.inputs.version }}"
          echo "  Next version: ${{ env.NEW_VERSION }}"
          echo ""
          echo "📦 Would publish:"
          echo "  📦 @mcp-installer/shared@${{ env.NEW_VERSION }}"
          echo "  🖥️ @mcp-installer/cli@${{ env.NEW_VERSION }}"
          echo ""
          echo "🔍 Testing publish commands..."
          
          # Test publish commands without actually publishing
          cd packages/shared
          pnpm publish --dry-run --access public
          cd ../cli  
          pnpm publish --dry-run
          
          echo ""
          echo "✅ Dry run completed successfully"
          echo "🚀 Run without --dry-run to actually publish"

      # CRITICAL: Publish shared package FIRST
      - name: Publish shared package
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "📦 Publishing @mcp-installer/shared@${{ env.NEW_VERSION }}..."
          cd packages/shared
          pnpm publish --access public --no-git-checks
          echo "✅ @mcp-installer/shared published successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Wait a moment for npm registry to propagate
      - name: Wait for registry propagation
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "⏳ Waiting 30 seconds for npm registry propagation..."
          sleep 30

      # THEN: Publish CLI package (workspace:* will auto-convert)
      - name: Publish CLI package
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🖥️ Publishing @mcp-installer/cli@${{ env.NEW_VERSION }}..."
          cd packages/cli
          echo "Final CLI dependencies before publish:"
          node -p "require('./package.json').dependencies['@mcp-installer/shared']"
          pnpm publish --no-git-checks
          echo "✅ @mcp-installer/cli published successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # IMPORTANT: Only commit and push AFTER successful publish
      - name: Commit and push version changes
        if: github.event.inputs.dry_run != 'true' && success()
        run: |
          echo "💾 Committing version changes to repository..."
          
          # Add and commit the version changes
          git add packages/*/package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
          
          # Create and push tag
          git tag "v${{ env.NEW_VERSION }}"
          
          # Push changes and tag
          git push origin ${{ github.ref_name }}
          git push origin "v${{ env.NEW_VERSION }}"
          
          echo "✅ Version ${{ env.NEW_VERSION }} committed and pushed to repository"

      # Cleanup on failure - reset package.json files
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "🧹 Cleaning up failed publish attempt..."
          git checkout -- packages/*/package.json || true
          echo "✅ Package.json files reset to original state"

      - name: Verify published packages
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "✅ Verifying published packages..."
          
          # Check shared package
          SHARED_VERSION=$(npm view @mcp-installer/shared version)
          echo "📦 @mcp-installer/shared@$SHARED_VERSION published successfully"
          
          # Check CLI package  
          CLI_VERSION=$(npm view @mcp-installer/cli version)
          echo "🖥️ @mcp-installer/cli@$CLI_VERSION published successfully"
          
          # Verify CLI package dependencies
          CLI_DEPS=$(npm view @mcp-installer/cli dependencies --json)
          echo "🔗 CLI package dependencies:"
          echo "$CLI_DEPS" | jq -r '.["@mcp-installer/shared"]' || echo "Could not verify dependency"

      - name: Create GitHub release
        if: github.event.inputs.dry_run != 'true' && success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## 🚀 MCP Installer v${{ env.NEW_VERSION }}
            
            ### 📦 Published Packages
            - `@mcp-installer/shared@${{ env.NEW_VERSION }}`
            - `@mcp-installer/cli@${{ env.NEW_VERSION }}`
            
            ### 📥 Installation
            ```bash
            npm install -g @mcp-installer/cli@${{ env.NEW_VERSION }}
            ```
            
            ### 🔄 Upgrade from Previous Version
            ```bash
            npm update -g @mcp-installer/cli
            ```
            
            ### 🔗 Links
            - [npm: @mcp-installer/cli](https://www.npmjs.com/package/@mcp-installer/cli)
            - [npm: @mcp-installer/shared](https://www.npmjs.com/package/@mcp-installer/shared)
            - [GitHub Repository](https://github.com/joobisb/mcp-installer)
            
            ### 📋 What's Changed
            This release was automatically published from the latest main branch.
            See the [commit history](https://github.com/joobisb/mcp-installer/commits/v${{ env.NEW_VERSION }}) for detailed changes.
          draft: false
          prerelease: false
