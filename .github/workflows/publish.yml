name: Publish to NPM

on:
  # Manual trigger with version selection
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

  # Automatic trigger on version tags
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history for version bumping
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build all packages
        run: pnpm -r run build

      - name: Run tests
        run: pnpm -r run test

      - name: Configure git for version bumping
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump package versions
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Bump version in both packages to keep them in sync
          cd packages/shared
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          cd ../cli
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit version changes
          cd ../..
          git add packages/*/package.json
          git commit -m "chore: bump version to $NEW_VERSION"

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEW_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Verify workspace dependency conversion
        run: |
          echo "🔍 Checking workspace dependency before publishing..."
          cd packages/cli
          echo "Current CLI dependency:"
          node -p "require('./package.json').dependencies['@mcp-installer/shared']"

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN MODE - No packages will be published"
          echo "Would publish:"
          echo "  📦 @mcp-installer/shared@${{ env.NEW_VERSION || 'current' }}"
          echo "  🖥️ mcp-installer@${{ env.NEW_VERSION || 'current' }}"
          
          # Test publish commands without actually publishing
          cd packages/shared
          pnpm publish --dry-run --access public
          cd ../cli  
          pnpm publish --dry-run

      # CRITICAL: Publish shared package FIRST
      - name: Publish shared package
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "📦 Publishing @mcp-installer/shared..."
          cd packages/shared
          pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Wait a moment for npm registry to propagate
      - name: Wait for registry propagation
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "⏳ Waiting 30 seconds for npm registry propagation..."
          sleep 30

      # THEN: Publish CLI package (workspace:* will auto-convert)
      - name: Publish CLI package
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🖥️ Publishing mcp-installer..."
          cd packages/cli
          echo "Final CLI dependencies before publish:"
          node -p "require('./package.json').dependencies['@mcp-installer/shared']"
          pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify published packages
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "✅ Verifying published packages..."
          
          # Check shared package
          SHARED_VERSION=$(npm view @mcp-installer/shared version)
          echo "📦 @mcp-installer/shared@$SHARED_VERSION published successfully"
          
          # Check CLI package  
          CLI_VERSION=$(npm view mcp-installer version)
          echo "🖥️ mcp-installer@$CLI_VERSION published successfully"
          
          # Verify CLI package dependencies
          CLI_DEPS=$(npm view mcp-installer dependencies --json)
          echo "🔗 CLI package dependencies:"
          echo "$CLI_DEPS" | jq -r '.["@mcp-installer/shared"]' || echo "Could not verify dependency"

      - name: Create GitHub release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## 🚀 MCP Installer v${{ env.NEW_VERSION }}
            
            ### 📦 Published Packages
            - `@mcp-installer/shared@${{ env.NEW_VERSION }}`
            - `mcp-installer@${{ env.NEW_VERSION }}`
            
            ### 📥 Installation
            ```bash
            npm install -g mcp-installer@${{ env.NEW_VERSION }}
            ```
            
            ### 🔗 Links
            - [npm: mcp-installer](https://www.npmjs.com/package/mcp-installer)
            - [npm: @mcp-installer/shared](https://www.npmjs.com/package/@mcp-installer/shared)
          draft: false
          prerelease: false

      - name: Push version tag
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: |
          git tag v${{ env.NEW_VERSION }}
          git push origin v${{ env.NEW_VERSION }}
          git push origin main